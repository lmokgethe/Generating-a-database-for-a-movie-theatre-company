CREATE DATABASE Cinema_db;
USE Cinema_db;

CREATE TABLE CINEMA
(Id INT(8) NOT NULL AUTO_INCREMENT,
Name VARCHAR(15) NOT NULL,
Address VARCHAR(30),
Phone_Number INT(10), PRIMARY KEY (Id));

CREATE TABLE MOVIE_SUPPLIER
(Id INT(10) NOT NULL AUTO_INCREMENT,
First_Name VARCHAR(10) NOT NULL,
Last_Name VARCHAR(10) NOT NULL,
Phone_Number INT(10) NOT NULL,
Address VARCHAR(30),
Number_of_Movies INT(5),
PRIMARY KEY (Id));

CREATE TABLE MOVIE_RATINGS
(Id INT(8) NOT NULL AUTO_INCREMENT,
Rating_Description VARCHAR(30),
PRIMARY KEY (Id));

CREATE TABLE MOVIE
(Id INT(8) NOT NULL AUTO_INCREMENT,
Title VARCHAR(30) NOT NULL,
Language VARCHAR(20) NOT NULL,
Release_Date Date NOT NULL,
Lead_Cast VARCHAR(30),
Director_Name VARCHAR(30),
Movie_ratings_Id INT(8),
Movie_supplier_Id INT(8),
PRIMARY KEY (Id),
FOREIGN KEY fk_movie_ratings(Movie_ratings_Id) REFERENCES MOVIE_RATINGS(Id)
ON DELETE CASCADE ON UPDATE CASCADE,
FOREIGN KEY fk_movie_supplier(Movie_supplier_Id) REFERENCES MOVIE_SUPPLIER(Id)
ON DELETE CASCADE ON UPDATE CASCADE);


CREATE TABLE MOVIE_SHOWING
(Id INT(8) NOT NULL AUTO_INCREMENT,
Duration INT(8) NOT NULL,
Start_time Date NOT NULL,
Cinema_Id INT(8),
Movie_Id INT(8),
Showing_room_Id INT(8),
PRIMARY KEY (Id),
FOREIGN KEY fk_cinema(Cinema_Id) REFERENCES CINEMA(Id)
ON DELETE CASCADE ON UPDATE CASCADE,
FOREIGN KEY fk_movie(Movie_Id) REFERENCES MOVIE(Id)
ON DELETE CASCADE ON UPDATE CASCADE);

CREATE TABLE SHOWING_ROOM
(Id INT(8) NOT NULL AUTO_INCREMENT,
Seats INT(8) NOT NULL,
Screen_Width DECIMAL(5,2) NOT NULL,
Screen_Length DECIMAL(5,2) NOT NULL,
Room_Type VARCHAR(10),
Movie_showing_Id INT(8),
PRIMARY KEY (Id),
FOREIGN KEY fk_movie_showing(Movie_showing_Id) REFERENCES MOVIE_SHOWING(Id)
ON DELETE CASCADE ON UPDATE CASCADE);

ALTER TABLE MOVIE_SHOWING
ADD (FOREIGN KEY fk_showing_room(Showing_room_Id) REFERENCES SHOWING_ROOM(Id)
ON DELETE CASCADE ON UPDATE CASCADE);

CREATE TABLE GENRE
(Id INT(8) NOT NULL AUTO_INCREMENT,
Genre_Title VARCHAR(30), PRIMARY KEY (Id));


CREATE TABLE MOVIE_GENRE
(Genre_Id INT(8),
Movie_ID INT(8),
FOREIGN KEY fk_movie1(Movie_Id) REFERENCES MOVIE(Id)
ON DELETE CASCADE ON UPDATE CASCADE,
FOREIGN KEY fk_genre(Genre_Id) REFERENCES GENRE(Id)
ON DELETE CASCADE ON UPDATE CASCADE);

CREATE TABLE MEMBERSHIP
(Id INT(8) NOT NULL AUTO_INCREMENT,
First_Name VARCHAR(30) NOT NULL,
Last_Name VARCHAR(30) NOT NULL,
Card_Number INT(30) NOT NULL,
Account_Number INT(10) NOT NULL,
Phone_Number INT(10) NOT NULL,
Points_Acquired INT(10) NOT NULL,
Address VARCHAR(30),
Age INT(2),
Sex VARCHAR(1),
Email VARCHAR(30),
PRIMARY KEY (Id));

Create Table ADMIN
(Id INT(8) NOT NULL,
Password INT(12) NOT NULL,
First VARCHAR(20) NOT NULL,
Last VARCHAR(20) NOT NULL,
Age INT(3) NOT NULL,
Position VARCHAR(20) NOT NULL,
PRIMARY KEY(Id));

Create Table TICKET
(Id INT(8) NOT NULL,
Show_Date Date NOT NULL,
Show_Time Time NOT NULL,
Quantity INT(8) NOT NULL,
Admin_Id INT (8),
PRIMARY KEY(Id),
FOREIGN KEY fk_Admin(Admin_Id) REFERENCES ADMIN(Id)
ON DELETE CASCADE ON UPDATE CASCADE);

Create Table CUSTOMER
(Id INT(8) NOT NULL,
Phone_number INT(8) NULL,
Email VARCHAR(30) NULL,
Payment_Method VARCHAR(30) NOT NULL,
Card_number INT(20) NOT NULL,
PRIMARY KEY(Id));

Create Table RESERVATION
(Reserved_Seats_Count INT(8),
Customer_Id INT(8),
Ticket_Id INT(8),
Movie_showing_Id INT(8),
FOREIGN KEY fk_movie_showing_1(Movie_showing_Id) REFERENCES MOVIE_SHOWING(Id)
ON DELETE CASCADE ON UPDATE CASCADE,
FOREIGN KEY fk_Ticket(Ticket_Id) REFERENCES TICKET(Id)
ON DELETE CASCADE ON UPDATE CASCADE,
FOREIGN KEY fk_customer(Customer_Id) REFERENCES CUSTOMER(Id)
ON DELETE CASCADE ON UPDATE CASCADE);

Create Table DISCOUNT
(ID INT(8) NOT NULL,
Amount DECIMAL(8) NOT NULL,
Discout_Type VARCHAR(20),
PRIMARY KEY (Id));

Create Table OFFER
(Discount_Id INT(8),
Ticket_Id INT(8),
FOREIGN KEY fk_Discount(Discount_Id) REFERENCES DISCOUNT(Id)
ON DELETE CASCADE ON UPDATE CASCADE,
FOREIGN KEY fk_Ticket_1(Ticket_Id) REFERENCES TICKET(Id)
ON DELETE CASCADE ON UPDATE CASCADE);

Create Table ITEM
(Id INT(8) NOT NULL,
Description VARCHAR(80) NOT NULL,
PRIMARY KEY(Id));

Create Table RECEIPT
(Id INT(8),
Receipt_Date DATE NOT NULL,
Receipt_Time TIME NOT NULL,
Item_Description VARCHAR(80) NOT NULL,
Cinema_address VARCHAR(50) NOT NULL,
Price DECIMAL(10) NOT NULL,
Discout_applied DECIMAL(10) NULL,
Customers_Id INT(10),
PRIMARY KEY(Id),
FOREIGN KEY fk_customer_2(Customers_Id) REFERENCES CUSTOMER(Id)
ON DELETE CASCADE ON UPDATE CASCADE);

Create Table ITEM_LINE
(Receipt_Id INT(8),
Item_Id INT(8),
FOREIGN KEY fk_Items(Item_Id) REFERENCES ITEM(Id)
ON DELETE CASCADE ON UPDATE CASCADE,
FOREIGN KEY fk_Receipts(Receipt_Id) REFERENCES RECEIPT(Id)
ON DELETE CASCADE ON UPDATE CASCADE);

Create Table ADMIN (
  Id int(8) NOT NULL,
  Password int(12) NOT NULL,
  First varchar(20) NOT NULL,
  Last varchar(20) NOT NULL,
  Age int(3) NOT NULL,
  Position varchar(20) NOT NULL,
  PRIMARY KEY(Id)
);

Create Table TICKET (
  Id int(8) NOT NULL,
  Show_Date Date NOT NULL,
  Show_Time Time NOT NULL,
  Quantity int(8) NOT NULL,
  Admin_Id int (8)
  PRIMARY KEY(Id),
  CONSTRAINT fk_Admin
  FOREIGN KEY(Admin_Id)
  REFERENCES ADMIN(Id)
);

Create Table CUSTOMER (
  Id int(8) NOT NULL,
  Phone_number int(12) NULL,
  Email varchar(30) NULL,
  Payment_Method varchar(30) NOT NULL,
  Card_number INT (20) NOT NULL,
  PRIMARY KEY(Id)
);

Create Table DISCOUNT(
  ID int(8) NOT NULL,
  Amount decimal(10) NOT NULL,
  Discout_Type varchar(20),
  PRIMARY KEY (Id)
);

Create Table OFFER (
Discount_Id int(8),
Ticket_Id int(8),
CONSTRAINT fk_Discount
FOREIGN KEY(Discount_Id)
REFERENCES Discount(Id),
CONSTRAINT fk_Ticket
FOREIGN KEY(Ticket_Id)
REFERENCES Ticket(Id)
);

Create Table ITEM (
  Id int(8) NOT NULL,
  Description Varchar(80) NOT NULL,
  PRIMARY KEY(Id)
);

Create Table RECEIPT  (
  Id int(8),
  Receipt_Date Date NOT NULL,
  Receipt_Time Time NOT NULL,
  Item_Description varchar(80) NOT NULL,
  Cinema_address Varchar(50) NOT NULL,
  Price decimal(10) NOT NULL,
  Discout_applied decimal(10) NULL,
  Customers_Id int(8),
  PRIMARY KEY(Id),
  CONSTRAINT fk_customer_Id2
  FOREIGN KEY(Customers_Id)
  REFERENCES CUSTOMER(Id)
);

Create Table ITEM_LINE (
  Receipt_Id int(8),
  Item_Id int(8),
  CONSTRAINT fk_Items
  FOREIGN KEY(Item_Id)
  REFERENCES  ITEM(Id),
  CONSTRAINT fk_Receipts
  FOREIGN KEY(Receipt_Id)
  REFERENCES RECEIPT(Id)
  );
